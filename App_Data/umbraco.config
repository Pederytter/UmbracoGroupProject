<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE root [<!ELEMENT master ANY>
<!ATTLIST master id ID #REQUIRED>
<!ELEMENT homePage ANY>
<!ATTLIST homePage id ID #REQUIRED>
<!ELEMENT textPage ANY>
<!ATTLIST textPage id ID #REQUIRED>
<!ELEMENT articlesMain ANY>
<!ATTLIST articlesMain id ID #REQUIRED>
<!ELEMENT articlesItem ANY>
<!ATTLIST articlesItem id ID #REQUIRED>
<!ELEMENT projectsMain ANY>
<!ATTLIST projectsMain id ID #REQUIRED>
<!ELEMENT projectsItem ANY>
<!ATTLIST projectsItem id ID #REQUIRED>
<!ELEMENT contactPage ANY>
<!ATTLIST contactPage id ID #REQUIRED>
<!ELEMENT comment ANY>
<!ATTLIST comment id ID #REQUIRED>
<!ELEMENT members ANY>
<!ATTLIST members id ID #REQUIRED>
]>
<root id="-1">
  <homePage id="1067" key="ba480cbc-bc4d-4c84-b536-9b2ab2f638de" parentID="-1" level="1" creatorID="0" sortOrder="0" createDate="2018-09-12T10:34:09" updateDate="2018-10-12T09:49:13" nodeName="Home" urlName="home" path="-1,1067" isDoc="" nodeType="1056" creatorName="Peter Rytter" writerName="Peter Rytter" writerID="0" template="1055" nodeTypeAlias="homePage" isPublished="true">
    <umbracoNaviHide>0</umbracoNaviHide>
    <siteTitle><![CDATA[Welcome to Aarhus Dev Group]]></siteTitle>
    <sectionImage><![CDATA[/media/1015/web-design-trends-predition-2016-3.png]]></sectionImage>
    <headerImage><![CDATA[/media/1001/frontoage.jpg]]></headerImage>
    <sectionHeader><![CDATA[The future is sleak]]></sectionHeader>
    <sectionContent><![CDATA[<p>Our community is around building up each other experience and widen the field of possibilities. We believe that information and experience is key to keep improving the possibilities there is located on the web.</p>]]></sectionContent>
    <projectsMain id="1068" key="958bd1cb-4e44-44ef-b3f3-b095b5eeb246" parentID="1067" level="2" creatorID="0" sortOrder="0" createDate="2018-09-12T11:41:51" updateDate="2018-09-12T11:41:51" nodeName="Projects" urlName="projects" path="-1,1067,1068" isDoc="" nodeType="1064" creatorName="Peter Rytter" writerName="Peter Rytter" writerID="0" template="1063" nodeTypeAlias="projectsMain" isPublished="true">
      <projectsItem id="2099" key="ccbcb6b5-2f62-4ef4-b961-6f4d64b8ddb0" parentID="1068" level="3" creatorID="0" sortOrder="0" createDate="2018-09-26T11:28:08" updateDate="2018-10-10T19:07:24" nodeName="Jorton Materiel" urlName="jorton-materiel" path="-1,1067,1068,2099" isDoc="" nodeType="1066" creatorName="Peter Rytter" writerName="Peter Rytter" writerID="0" template="1065" nodeTypeAlias="projectsItem" isPublished="true">
        <umbracoNaviHide>1</umbracoNaviHide>
        <projectImage><![CDATA[/media/1006/udvalgt.jpg]]></projectImage>
        <description><![CDATA[Tidligere Umbraco projekt, der er lavet til virksomheden Jorton.

Projektet handlede om at deres materiele afdeling gerne vil have muligheden for at leje deres udstyr både til interne medarbejdere og eksterne kunder.]]></description>
        <cname><![CDATA[Jorton Materiel]]></cname>
        <published>1</published>
      </projectsItem>
      <projectsItem id="4104" key="d501ea66-82b8-4a32-9b93-d60baa346a65" parentID="1068" level="3" creatorID="0" sortOrder="1" createDate="2018-10-10T20:20:31" updateDate="2018-10-10T20:20:31" nodeName="Intrace" urlName="intrace" path="-1,1067,1068,4104" isDoc="" nodeType="1066" creatorName="Peter Rytter" writerName="Peter Rytter" writerID="0" template="1065" nodeTypeAlias="projectsItem" isPublished="true">
        <umbracoNaviHide>0</umbracoNaviHide>
        <projectImage><![CDATA[/media/1011/header.png]]></projectImage>
        <description><![CDATA[Discover the app
Intrace offers many features which will take your time management to the next level. Each feature is being developed with the user in mind, so no matter what feature you will be using, we promise it's going to be a smooth experience.

The platform expands to all devices, so no matter where you are you can easily access all your information.]]></description>
        <cname><![CDATA[Intrace]]></cname>
        <published>1</published>
      </projectsItem>
      <projectsItem id="4105" key="46fe07d4-4123-4b8f-a56f-1f6712a4ea78" parentID="1068" level="3" creatorID="0" sortOrder="2" createDate="2018-10-10T20:24:27" updateDate="2018-10-12T09:15:58" nodeName="Roasted Coffee" urlName="roasted-coffee" path="-1,1067,1068,4105" isDoc="" nodeType="1066" creatorName="Peter Rytter" writerName="Peter Rytter" writerID="0" template="1065" nodeTypeAlias="projectsItem" isPublished="true">
        <umbracoNaviHide>0</umbracoNaviHide>
        <projectImage><![CDATA[/media/1012/screenshot_1.png]]></projectImage>
        <description><![CDATA[Roasting is a heat process that turns coffee into the fragrant, dark brown beans we know and love.
Roasting brings out the aroma and flavor that is locked inside the green coffee beans. Beans are stored green, a state in which they can be kept without loss of quality or taste.  A green bean has none of the characteristics of a roasted bean — it’s soft and spongy to the bite and smells grassy.

The perfect temperature
Brewing a perfect cup of coffee is the weakest link in the full enjoyment of fine coffee. Buying the finest coffee is only the beginning and can go for naught if the brewing is not done correctly. It is very easy to ruin otherwise excellent coffee with improper brewing. We realize you would like to hear that once you have purchased excellent coffee beans, the rest is as simple as pushing a button, but, all we can say is: it’s time to “wake up and smell the coffee”. The grower, and the roaster do their parts, and you have to do your part. If either party drops the ball, exquisite coffee will not happen.]]></description>
        <cname><![CDATA[Roasted Coffee Wordpress site for workshop]]></cname>
        <published>1</published>
      </projectsItem>
    </projectsMain>
    <contactPage id="2073" key="5234ed5c-9481-46ee-b1a9-9563cdf71bca" parentID="1067" level="2" creatorID="0" sortOrder="1" createDate="2018-09-19T08:59:23" updateDate="2018-09-19T11:53:09" nodeName="Conctact us" urlName="conctact-us" path="-1,1067,2073" isDoc="" nodeType="2072" creatorName="Peter Rytter" writerName="Peter Rytter" writerID="0" template="2071" nodeTypeAlias="contactPage" isPublished="true">
      <image><![CDATA[/media/1002/contact-3.jpg]]></image>
    </contactPage>
    <articlesMain id="2078" key="1d38ca19-2781-41df-936b-b5e307bb3807" parentID="1067" level="2" creatorID="0" sortOrder="2" createDate="2018-09-19T11:06:30" updateDate="2018-10-10T19:33:05" nodeName="Articles" urlName="articles" path="-1,1067,2078" isDoc="" nodeType="1060" creatorName="Peter Rytter" writerName="Peter Rytter" writerID="0" template="1059" nodeTypeAlias="articlesMain" isPublished="true">
      <umbracoNaviHide>0</umbracoNaviHide>
      <articlesItem id="4101" key="cbfa40ff-4908-474f-a27b-7215e7903d60" parentID="2078" level="3" creatorID="0" sortOrder="0" createDate="2018-10-10T19:34:02" updateDate="2018-10-10T19:43:34" nodeName="AWS AppSync" urlName="aws-appsync" path="-1,1067,2078,4101" isDoc="" nodeType="1062" creatorName="Peter Rytter" writerName="Peter Rytter" writerID="0" template="1061" nodeTypeAlias="articlesItem" isPublished="true">
        <umbracoNaviHide>0</umbracoNaviHide>
        <cname><![CDATA[Using Relay with AWS AppSync]]></cname>
        <contentArea><![CDATA[<div class="section-inner sectionLayout--insetColumn">
<p id="e9f9" class="graf graf--p graf-after--h3">This post will walk you through a simple “todo list” application built with<span> </span><a rel="nofollow noopener" href="https://aws.amazon.com/appsync/" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://aws.amazon.com/appsync/">AWS AppSync</a>,<span> </span><a rel="nofollow noopener" href="https://aws-amplify.github.io/" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://aws-amplify.github.io/">AWS Amplify</a>,<span> </span><a rel="nofollow noopener" href="https://reactjs.org/" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://reactjs.org/">React</a>, and<span> </span><a rel="nofollow noopener" href="http://facebook.github.io/relay/" target="_blank" class="markup--anchor markup--p-anchor" data-href="http://facebook.github.io/relay/">Relay</a>. The sample app will show how to achieve smooth integration of AppSync and Relay, supporting key features like automatic pagination, mutations with optimistic client-side updates, and real-time synchronization of data across clients with subscriptions.</p>
<p class="graf graf--p graf-after--h3"> </p>
</div>
<div class="section-inner sectionLayout--insetColumn">
<p id="e34e" class="graf graf--p graf-after--figure">If you want to jump right into the example app, you can see<span> </span><a rel="nofollow noopener" href="https://github.com/aws-samples/aws-appsync-relay" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://github.com/aws-samples/aws-appsync-relay">the code</a><span> </span>here. Otherwise, read ahead for a complete walkthrough.</p>
<h3 id="7e70" class="graf graf--h3 graf-after--p">Background</h3>
<p id="42da" class="graf graf--p graf-after--h3">Relay is a popular client-side framework for interacting with GraphQL APIs from React-based applications. Like GraphQL and React, Relay is an open source project begun by Facebook. While Relay is old enough to predate GraphQL’s own open source debut, it was significantly revamped last year as Relay Modern, the version that will be used in this post.<br /> <br /> AWS AppSync is a fully-managed, serverless GraphQL service supporting real-time data queries, synchronization, and offline programming features. AppSync lets you define any GraphQL API you like and connect it easily to other AWS services like Lambda, ElasticSearch, or DynamoDB. Relay does have some particular requirements of the GraphQL server it connects to, but AppSync gives you the control over your schema to meet those needs.<br /> <br /> If you’re building a new app and choosing a frontend framework to use, the<span> </span><a rel="nofollow noopener" href="https://www.apollographql.com/client" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://www.apollographql.com/client">Apollo Client</a><span> </span>is another great option that<span> </span><a rel="nofollow noopener" href="https://github.com/awslabs/aws-mobile-appsync-sdk-js" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://github.com/awslabs/aws-mobile-appsync-sdk-js">integrates very will with AppSync</a>and has fewer requirements about the structure of your schema. If you already have experience with Relay though, or if you prefer its features, app structure, and opinionated approach, then this post is for you.</p>
<h3 id="0522" class="graf graf--h3 graf-after--p">AppSync Basics</h3>
<p id="2016" class="graf graf--p graf-after--h3">Before addressing the specific requirements of Relay, it’s worth spending a moment on some core GraphQL and AppSync concepts. Here are a few that will be discussed throughout the post:</p>
<ul class="postList">
<li id="7732" class="graf graf--li graf-after--p"><strong class="markup--strong markup--li-strong">Schema</strong>: This is a<span> </span><a rel="nofollow noopener" href="https://graphql.org/learn/schema/" target="_blank" class="markup--anchor markup--li-anchor" data-href="https://graphql.org/learn/schema/">key GraphQL concept</a>. It is the primary “contract” between API consumers and the API maintainers.</li>
<li id="2f81" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Resolvers</strong>: Also a standard GraphQL concept, a<span> </span><a rel="nofollow noopener" href="https://graphql.org/learn/execution/" target="_blank" class="markup--anchor markup--li-anchor" data-href="https://graphql.org/learn/execution/">resolver</a><span> </span>returns a value for a given field of a type in the schema. In general, resolvers may be called recursively.</li>
<li id="e5c5" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Data Sources</strong>: In AppSync, a Data Source is a particular backend resource like a DynamoDB table or Lambda function that is used by resolvers to handle queries and mutations.</li>
<li id="56f7" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Resolver Mapping Templates</strong>: AppSync resolvers work by translating a request (a query or mutation coming from the client) into a JSON document that represents a data source invocation. Responses are then handled the same way, by translating the raw response from the data source into a GraphQL result. This translation is done with a resolver mapping template written in the Apache Velocity Template Language (VTL). (For detailed information, see the<span> </span><a rel="nofollow noopener" href="https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference.html" target="_blank" class="markup--anchor markup--li-anchor" data-href="https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference.html">Template Reference</a>).</li>
</ul>
<p id="50ae" class="graf graf--p graf-after--li">With these terms established, we can dig into the sample application schema. If you want to follow along with a running AppSync environment, you can launch the sample app’s API backend with CloudFormation as documented in the project<span> </span><a rel="nofollow noopener" href="https://github.com/aws-samples/aws-appsync-relay" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://github.com/aws-samples/aws-appsync-relay">README</a>. (You’ll need to create a Cognito User to authenticate as before running queries.)</p>
<h3 id="70fd" class="graf graf--h3 graf-after--p">The Relay Spec</h3>
<p id="82c2" class="graf graf--p graf-after--h3">In order to work with the Relay client library our spec must satisfy the<span> </span><a rel="nofollow noopener" href="https://facebook.github.io/relay/docs/en/graphql-server-specification.html" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://facebook.github.io/relay/docs/en/graphql-server-specification.html">GraphQL Server Specification.</a><span> </span>The spec consists mainly of:</p>
<ul class="postList">
<li id="322d" class="graf graf--li graf-after--p"><strong class="markup--strong markup--li-strong">Globally unique IDs</strong>: All types in your API must implement Relay’s<span> </span>Nodeinterface, which consists of a single<span> </span>id<span> </span>field. This allows Relay to do things like automatically updating objects in its client-side store in response to mutations.</li>
<li id="f87f" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">A particular connection convention</strong>: A one-to-many or many-to-many relationship between two types (e.g.<span> </span>User<span> </span>and<span> </span>Friends), often referred to as a “connection” in GraphQL parlance, must be structured a certain way, with intermediate “connection types” and “edge types”.</li>
<li id="1194" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Specific mutation inputs/outputs</strong>: The inputs to mutations must be provided as “input types” (this is actually a first-class<span> </span><a rel="nofollow noopener" href="https://graphql.org/graphql-js/mutations-and-input-types/" target="_blank" class="markup--anchor markup--li-anchor" data-href="https://graphql.org/graphql-js/mutations-and-input-types/">GraphQL concept</a>), and if the client provides a<span> </span>clientMutationId<span> </span>with its input, the server must pass it back unchanged.</li>
</ul>
<p id="cfad" class="graf graf--p graf-after--li">The unique ID requirement is very easy to achieve with AppSync, and corresponds very well to a persistence layer consisting of a single DynamoDB table, as is used in the sample app (just make sure all the types in the GraphQL API have a unique ID called “id” — this is a firm requirement of Relay).<br /> <br /> The other requirements for connections and mutations deserve a little more attention.</p>
<h3 id="cd2a" class="graf graf--h3 graf-after--p">Connections</h3>
<p id="f9b7" class="graf graf--p graf-after--h3">As discussed above, connections such as the<span> </span>listTodos<span> </span>field in our sample app must be structured a certain way in Relay. While this requires some up-front work on the backend, it lets us leverage Relay's built-in<span> </span><a rel="nofollow noopener" href="https://facebook.github.io/relay/docs/en/pagination-container.html" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://facebook.github.io/relay/docs/en/pagination-container.html">pagination support</a><span> </span>and avoid writing our own imperative pagination code. Let's look at a snippet from our GraphQL schema that involves this connection:</p>
<pre class="graf graf--pre graf-after--p">type Todo implements Node {<br />  id: ID<br />  userId: ID!<br />  createdAt: String!<br />  text: String!<br />  complete: Boolean!<br />}</pre>
<pre class="graf graf--pre graf-after--pre">type TodoConnection {<br />  edges: [TodoEdge!]<br />  nextToken: String<br />  pageInfo: PageInfo!<br />}</pre>
<pre class="graf graf--pre graf-after--pre">type TodoEdge {<br />  node: Todo!<br />  cursor: String<br />}</pre>
<pre class="graf graf--pre graf-after--pre">type Viewer implements Node {<br />  id: ID<br />  listTodos(after: String, first: Int): TodoConnection!<br />}</pre>
<pre class="graf graf--pre graf-after--pre">type Query {<br />  viewer: Viewer!<br />}</pre>
<p id="6726" class="graf graf--p graf-after--pre">This can be queried like:</p>
<pre class="graf graf--pre graf-after--p">query {<br />  viewer {<br />    listTodos {<br />      edges {<br />        node {<br />          id<br />          text<br />          complete<br />        }<br />      }<br />    }<br />  }<br />}</pre>
<p id="7f43" class="graf graf--p graf-after--pre">A simple response mapping template for a DynamoDB query for Todos could look something like this:</p>
<pre class="graf graf--pre graf-after--p">$util.toJson($context.result.items)</pre>
<p id="af17" class="graf graf--p graf-after--pre">However, that would just give us a simple “flat list” of results, which does not match the format required by Relay. Here is a mapping template that gives us what we need:</p>
<pre class="graf graf--pre graf-after--p">#set($edges = [])<br />#foreach($item in $context.result.items)<br />    $util.quiet($edges.add({"node": $item}))<br />#end<br />{<br />    "edges": $util.toJson($edges),<br />}</pre>
<p id="67d5" class="graf graf--p graf-after--pre">This example omits some pagination-related fields for simplicity (see<span> </span><a rel="nofollow noopener" href="https://github.com/aws-samples/aws-appsync-relay/blob/03761e81867f93194f23ee98e826759828fef524/backend/template.yml#L34-L52" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://github.com/aws-samples/aws-appsync-relay/blob/03761e81867f93194f23ee98e826759828fef524/backend/template.yml#L34-L52">the source</a><span> </span>for a complete example), but the basic pattern of using VTL to transform the structure of the DynamoDB response into that required by Relay let’s us handle<span> </span>listTodos<span> </span>queries easily.</p>
<h3 id="6d89" class="graf graf--h3 graf-after--p">Mutations</h3>
<p id="789f" class="graf graf--p graf-after--h3">Relay also has some specific requirements of the inputs and outputs of mutations (updates/deletes/etc). Take a look at this subset of our schema handling Todo updates in compliance with the spec (creates and deletes are handled similarly):</p>
<pre class="graf graf--pre graf-after--p">input UpdateTodoInput {<br />  id: ID!<br />  complete: Boolean<br />  clientMutationId: ID<br />}</pre>
<pre class="graf graf--pre graf-after--pre">type UpdateTodoPayload {<br />  node: Todo<br />  clientMutationId: ID<br />  userId: ID!<br />}</pre>
<pre class="graf graf--pre graf-after--pre">type Mutation {<br />  updateTodo(input: UpdateTodoInput!): UpdateTodoPayload!<br />}</pre>
<p id="0758" class="graf graf--p graf-after--pre">Note that an<span> </span><a rel="nofollow noopener" href="https://graphql.org/graphql-js/mutations-and-input-types/" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://graphql.org/graphql-js/mutations-and-input-types/">input type</a><span> </span>is used as required by the spec. Additionally, if a<span> </span>clientMutationId<span> </span>field is supplied in the input, it must be returned unchanged in the output for internal use by Relay (there is some<span> </span><a rel="nofollow noopener" href="https://github.com/facebook/relay/issues/2077" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://github.com/facebook/relay/issues/2077">discussion</a><span> </span>in the Relay project of removing this field, but for now it is required). This can be accomplished in the response mapping template like this:</p>
<pre class="graf graf--pre graf-after--p">{<br />    "node": $util.toJson($context.result),<br />    "clientMutationId": "$context.arguments.input.clientMutationId",<br />    "userId": "$context.identity.sub"<br />}</pre>
<p id="ccde" class="graf graf--p graf-after--pre">To avoid adding unnecessary metadata to the core types in our schema, the Relay convention is to return a “payload” object from the mutation and add things like the<span> </span>clientMutationId<span> </span>there. In our app, which uses GraphQL subscriptions for real-time updates, this payload must also include a<span> </span>userIdfor authorizing and filtering subscriptions. Here is the relevant piece of the schema, which takes advantage of<span> </span><a rel="nofollow noopener" href="https://docs.aws.amazon.com/appsync/latest/devguide/real-time-data.html" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://docs.aws.amazon.com/appsync/latest/devguide/real-time-data.html">AppSync's native subscription support</a>:</p>
<pre class="graf graf--pre graf-after--p">type Subscription {<br />  updatedTodo(userId: ID!): UpdateTodoPayload<br />  @aws_subscribe(mutations: ["updateTodo"])<br />}</pre>
<p id="a42e" class="graf graf--p graf-after--pre">See the AppSync documentation for a complete discussion of<span> </span><a rel="nofollow noopener" href="https://docs.aws.amazon.com/appsync/latest/devguide/security.html" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://docs.aws.amazon.com/appsync/latest/devguide/security.html">security</a>, including<span> </span><a rel="nofollow noopener" href="https://docs.aws.amazon.com/appsync/latest/devguide/security-authorization-use-cases.html#real-time-data" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://docs.aws.amazon.com/appsync/latest/devguide/security-authorization-use-cases.html#real-time-data">granular authorization for subscriptions</a>. You can also look at the sample app code for a working example.</p>
</div>]]></contentArea>
        <featuredImage><![CDATA[{
  "focalPoint": {
    "left": 0.5,
    "top": 0.5
  },
  "src": "/media/1009/1_xhxqykfpbfnjih5_syjbwq.jpeg",
  "crops": []
}]]></featuredImage>
      </articlesItem>
      <articlesItem id="4103" key="44139318-8d74-410e-81ba-167472b59c39" parentID="2078" level="3" creatorID="0" sortOrder="1" createDate="2018-10-10T19:47:13" updateDate="2018-10-10T19:47:13" nodeName="Pulumi" urlName="pulumi" path="-1,1067,2078,4103" isDoc="" nodeType="1062" creatorName="Peter Rytter" writerName="Peter Rytter" writerID="0" template="1061" nodeTypeAlias="articlesItem" isPublished="true">
        <umbracoNaviHide>0</umbracoNaviHide>
        <cname><![CDATA[Pulumi as Infrastructure as Code software]]></cname>
        <contentArea><![CDATA[<h3 id="0097" class="graf graf--h3 graf-after--h3">Introduction</h3>
<p id="7c82" class="graf graf--p graf-after--h3">This is the blog posts in which we try to outline our experience regarding the engineering at HARA. HARA is a blockchain-based data exchange for the food sector and provides farmers and all agriculture player access to reliable data and transactions. If you want to know HARA in depth, please check our<span> </span><a rel="noopener" href="https://medium.com/@HARAToken" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://medium.com/@HARAToken">medium<span> </span></a>page.</p>
<p id="2e44" class="graf graf--p graf-after--p">Today, many company used terraform as a tools for configure their favorite cloud infrastructure. This will makes their configuration more accurate and well documented, we know this as Infrastructure-as-Code (IAC). No exception at HARA, we used terraform to build our cloud infrastructure because they provides many benefits. We also use serverless framework to deploy application on serverless architecture. Everything is great, but today we are not going to talk about this two or other tools. There is another way to build infrastructure as well as serverless on cloud that is Pulumi and we decide to explore this tool as alternative. You might as well try pulumi (By the time writer write this, pulumi version is<span> </span>0.14.1)</p>
<h3 id="ff2a" class="graf graf--h3 graf-after--p">Getting started on Pulumi</h3>
<p id="4d66" class="graf graf--p graf-after--h3">Their<span> </span><a rel="noopener noreferrer nofollow noopener" href="https://pulumi.io/" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://pulumi.io/">websites</a><span> </span>is a good starting place, install pulumi on your computer and sign up in their websites to access our<span> </span><a rel="noopener noreferrer nofollow noopener" href="https://app.pulumi.com/yourUserName" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://app.pulumi.com/yourUserName">console</a> . Because pulumi is also supported immutable infrstructure like terraform, when you create resources, all of the activity and states of your infrastructure will be recorded in their websites. Its different from terraform when you can store “resources states” in many way (you need to specify the<span> </span><a rel="noopener noreferrer nofollow noopener" href="https://www.terraform.io/docs/backends/" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://www.terraform.io/docs/backends/">backends</a><span> </span>on terraform).</p>
<p id="5c10" class="graf graf--p graf-after--p">Create token first and enter your access token when you are prompted or just save your token with name<span> </span>PULUMI_ACCESS_TOKEN<span> </span>as environment variables and you will be set.</p>
<p>New Access Token</p>
<p id="4d03" class="graf graf--p graf-after--figure">There are several providers that supported on pulumi (GCP, Azure, AWS and Kubernetes). Pulumi create several packages to support each provider, that is:</p>
<ul class="postList">
<li id="5ba9" class="graf graf--li graf-after--p">@pulumi: used for accessing the core programming model around resources, configuration, etc.</li>
<li id="d573" class="graf graf--li graf-after--li">@pulumi/aws: used for deploying resources to AWS.</li>
<li id="43bb" class="graf graf--li graf-after--li">@pulumi/aws-infra: Additional AWS libraries to provide AWS networking and infrastructure.</li>
<li id="654c" class="graf graf--li graf-after--li">@pulumi/aws-serverless: Additional AWS libraries for writing serverless applications on AWS.</li>
<li id="d561" class="graf graf--li graf-after--li">@pulumi/azure: used for deploying resources to Azure.</li>
<li id="1f6b" class="graf graf--li graf-after--li">@pulumi/gcp: used for deploying resources to Google Cloud Platform.</li>
<li id="1456" class="graf graf--li graf-after--li">@pulumi/kubernetes: used for deploying resources to Kubernetes.</li>
<li id="b0d2" class="graf graf--li graf-after--li">@pulumi/cloud: Cloud-agnostic package</li>
</ul>
<p id="657e" class="graf graf--p graf-after--li">When you want to compare terraform and pulumi, Terraform is more like Infrastructure as Declarative Statement. As for Pulumi, there are four programming languages that has been supported, that is: Python, Go, Typescript or Javascript. For nodejs SDK in pulumi itself, is written using TypeScript.</p>
<p id="5f85" class="graf graf--p graf-after--p">An example that i provide will be using AWS as cloud provider. I will create simple program to create IAM user resources using Javascript. I will use code that already been in terraform (check<span> </span><a rel="nofollow noopener" href="https://github.com/terraform-aws-modules/terraform-aws-iam/tree/master/modules/iam-user" target="_blank" class="markup--anchor markup--p-anchor" data-href="https://github.com/terraform-aws-modules/terraform-aws-iam/tree/master/modules/iam-user">here</a>) and transform into Pulumi.</p>
<p id="abd5" class="graf graf--p graf-after--p">To start, type:<span> </span>pulumi new aws-javascript<span> </span>in empty folder and pulumi will initialize and create a new project. Fill the project name, project description and stack name. New files will be created (.js and .yaml files) and node_modules depedencies will be installed in that folder.</p>
<p id="a00b" class="graf graf--p graf-after--p">First, we need to import<span> </span>@pulumi<span> </span>and<span> </span>@pulumi-aws. We can create IAM user by using<span> </span>aws.iam.User<span> </span>class. To provides additional access key or login profile, we use<span> </span>aws.iam.AccessKey<span> </span>and<span> </span>aws.iam.UserLoginProfile<span> </span>class.</p>]]></contentArea>
        <featuredImage><![CDATA[{
  "focalPoint": {
    "left": 0.5,
    "top": 0.5
  },
  "src": "/media/1010/1_obbpp7kv0gfgd326yoispw.png",
  "crops": []
}]]></featuredImage>
      </articlesItem>
    </articlesMain>
    <textPage id="2079" key="1e436a58-bcc5-4095-8a76-ca8b23033b74" parentID="1067" level="2" creatorID="0" sortOrder="3" createDate="2018-09-19T11:09:48" updateDate="2018-10-12T09:38:36" nodeName="About" urlName="about" path="-1,1067,2079" isDoc="" nodeType="1058" creatorName="Peter Rytter" writerName="Peter Rytter" writerID="0" template="1057" nodeTypeAlias="textPage" isPublished="true">
      <umbracoNaviHide>0</umbracoNaviHide>
      <basicGridLayout><![CDATA[{
  "name": "1 column layout",
  "sections": [
    {
      "grid": 12,
      "rows": [
        {
          "label": "Article",
          "name": "Article",
          "areas": [
            {
              "grid": 4,
              "hasConfig": false,
              "controls": [
                {
                  "value": "<h2>Vision</h2>\n<p>Our vision is to collabroate and further improve upon the current internet of things. Whether its improving on the culture of the developers or improving upon the current developer tools, this is the place to discuss and share ideas.</p>",
                  "editor": {
                    "alias": "rte"
                  },
                  "active": false
                }
              ]
            },
            {
              "grid": 8,
              "hasConfig": false,
              "controls": [
                {
                  "value": {
                    "id": 3100,
                    "udi": "umb://media/1d7c0b5d51684cbc92b0e0de2fdd6b57",
                    "image": "/media/1008/acrolinx-vision-post.png"
                  },
                  "editor": {
                    "alias": "media"
                  },
                  "active": false
                }
              ]
            }
          ],
          "hasConfig": false,
          "id": "6fe89ef2-50af-4018-cf17-cd5bd44c6ba2"
        },
        {
          "name": "3 team members",
          "areas": [
            {
              "grid": 4,
              "hasConfig": false,
              "controls": [
                {
                  "value": "<h2>Peter Rytter</h2>",
                  "editor": {
                    "alias": "rte"
                  },
                  "active": false
                },
                {
                  "value": {
                    "id": 4106,
                    "udi": "umb://media/0de6d00b2fa340a2924b667591f4039e",
                    "image": "/media/1013/pete.png"
                  },
                  "editor": {
                    "alias": "media"
                  },
                  "active": false
                }
              ]
            },
            {
              "grid": 4,
              "hasConfig": false,
              "controls": [
                {
                  "value": "<h2>Skills</h2>\n<p>I'm quite experienced in Laravel and have been developing in that framework for around a year. Besides that I have developed in quite a bit of differences CMS, code languages and frameworks. I been using WordPress for must of my projects, mainly because of how fast it is to get a basic site up and running. In the instance there is a need for some customization I have been using Umbraco or Drupal instead.<br /><br />My main language is PHP mainly because the shear amount of time I have been coding in that language. Currently I'm looking more into other languages, for widen my experience and upgrading my code quality.</p>",
                  "editor": {
                    "alias": "rte"
                  },
                  "active": false
                }
              ],
              "active": false
            },
            {
              "grid": 4,
              "hasConfig": false,
              "controls": []
            }
          ],
          "styles": {},
          "config": {
            "class": "about-personal"
          },
          "hasConfig": true,
          "id": "476fa998-4017-8dd0-00d5-07ff843e3426",
          "active": true
        }
      ]
    }
  ]
}]]></basicGridLayout>
    </textPage>
    <textPage id="2090" key="14d312dd-e0a0-4b3a-a93c-41f87b9821ab" parentID="1067" level="2" creatorID="0" sortOrder="4" createDate="2018-09-26T09:24:30" updateDate="2018-09-26T09:24:38" nodeName="Login" urlName="login" path="-1,1067,2090" isDoc="" nodeType="1058" creatorName="Peter Rytter" writerName="Peter Rytter" writerID="0" template="2089" nodeTypeAlias="textPage" isPublished="true" />
    <textPage id="2091" key="0361bed0-6886-47a2-947f-bc14fff3da8e" parentID="1067" level="2" creatorID="0" sortOrder="5" createDate="2018-09-26T09:28:11" updateDate="2018-10-10T20:03:14" nodeName="Forbidden Access" urlName="forbidden-access" path="-1,1067,2091" isDoc="" nodeType="1058" creatorName="Peter Rytter" writerName="Peter Rytter" writerID="0" template="1057" nodeTypeAlias="textPage" isPublished="true">
      <umbracoNaviHide>1</umbracoNaviHide>
      <basicGridLayout><![CDATA[{
  "name": "1 column layout",
  "sections": [
    {
      "grid": 12,
      "rows": [
        {
          "label": "Headline",
          "name": "Headline",
          "areas": [
            {
              "grid": 12,
              "hasConfig": false,
              "controls": [
                {
                  "value": "Forbidden Access",
                  "editor": {
                    "alias": "headline"
                  },
                  "active": false
                },
                {
                  "value": "<p>You do not have access for this page!</p>",
                  "editor": {
                    "alias": "rte"
                  },
                  "active": true
                }
              ],
              "active": true
            }
          ],
          "hasConfig": false,
          "id": "c6907eec-2903-d9ad-cf28-db38b22b8448",
          "hasActiveChild": true,
          "active": true
        }
      ]
    }
  ]
}]]></basicGridLayout>
    </textPage>
    <members id="2094" key="bbe1a362-aebb-432e-ade4-555e8d6f05f3" parentID="1067" level="2" creatorID="0" sortOrder="6" createDate="2018-09-26T10:21:54" updateDate="2018-09-26T10:21:54" nodeName="Members" urlName="members" path="-1,1067,2094" isDoc="" nodeType="2093" creatorName="Peter Rytter" writerName="Peter Rytter" writerID="0" template="2092" nodeTypeAlias="members" isPublished="true" />
    <textPage id="2096" key="e4d11e1d-b4a3-4aeb-ad2f-ac688f28db8c" parentID="1067" level="2" creatorID="0" sortOrder="7" createDate="2018-09-26T10:37:13" updateDate="2018-09-26T10:37:19" nodeName="Register" urlName="register" path="-1,1067,2096" isDoc="" nodeType="1058" creatorName="Peter Rytter" writerName="Peter Rytter" writerID="0" template="2095" nodeTypeAlias="textPage" isPublished="true" />
  </homePage>
</root>